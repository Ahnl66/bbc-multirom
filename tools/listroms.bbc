REM Simple program to list installed ROMs, similar to *ROMS on later MOS versions
DIM buf% 256
DIM code% 256
PROCassemble
result=USR(tubecheck)
FOR rom% = 15 TO 0 STEP -1
A%=rom%
result=USR(read_id) AND &FFFF
type$="?"
IF result=&BFB5 THEN type$="Flash":REM Flash
IF result=&0001 THEN type$="SWRAM":REM Writeable
result=USR(read_header)
IF ((result AND &FF)=0) AND (type$="?") THEN type$="ROM"
PRINT type$;TAB(6);~rom%;TAB(8);
IF type$<>"?" THEN PROCtitle
PRINT
NEXT rom%
END

DEFPROCtitle
offset=9
REPEAT
ch=buf%?offset
PRINT CHR$(ch);
offset=offset+1
UNTIL ch=0
ENDPROC

DEFPROCassemble
osbyte = &FFF4
romzp = &F4
romsel = &FE30
romsav = &70
IF INKEY(-256) = &01 THEN romsel = &FE05
FOR pass% = 0 TO 2 STEP 2
P% = code%
[OPT pass%
.tubecheck
    LDA #&EA:LDX #0:LDY #&FF:JSR osbyte
    TXA:BEQ tube_ok
    BRK
]
?P%=0
$(P%+1)="Can't run on Tube"
P%?18=0
P%=P%+19
[OPT pass%
.tube_ok
    RTS

.prologue
    PHA
    SEI
    LDA romzp
    STA romsav
    PLA
    RTS

.epilogue
    PHA
    LDA romsav
    JSR select_rom
    CLI
    PLA
    RTS

.select_rom
    STA romzp
    STA romsel
    RTS

.low_rom
    LDA romzp
    AND #&FE
    JSR select_rom
    RTS

.high_rom
    LDA romzp
    ORA #&01
    JSR select_rom
    RTS

.command
    PHA
    JSR high_rom
    LDA #&AA:STA &9555      \ Write &AA to &5555
    JSR low_rom
    LDA #&55:STA &AAAA      \ Write &55 to &2AAA
    JSR high_rom
    PLA
    STA &9555   \ Write command byte to &5555
    RTS

.read_id
    JSR prologue
    JSR select_rom

    \ Check for sideways RAM before we try writing!
    LDA &8000
    EOR #&FF
    STA &8000
    CMP &8000
    BEQ ram

    LDA #&90:JSR command    \ Enter ID mode
    LDX &8000               \ Read manufacturer ID byte
    LDA &8001               \ Read product ID byte
    PHA
    LDA #&F0:JSR command    \ Exit ID mode
    PLA

\ Check if the first two bytes of the ROM match the ID bytes we just read
    CPX &8000
    BNE got_id
    CMP &8001
    BNE got_id
\... if so, we're almost certainly not looking at a valid flash IC. Return an
\ invalid ID of 00,00
    LDX #&00
    LDA #&00

.got_id
    JMP epilogue

.ram
\ Oops, it was actually RAM! Restore the byte we clobbered and return an
\ invalid ID of 00,01
    EOR #&FF
    STA &8000
    LDX #&00
    LDA #&01
    JMP epilogue

.read_header
    JSR prologue
    JSR select_rom
    LDX #0
.readloop
    LDA &8000, X
    STA buf%, X
    INX
    BNE readloop

    LDX &8007
    INX
    LDA &8000, X
    SEC:SBC #ASC("(")
    BNE read_header_done
    INX
    LDA &8000,X
    SEC:SBC #ASC("C")
    BNE read_header_done
    INX
    LDA &8000,X
    SEC:SBC #ASC(")")

.read_header_done
    JMP epilogue
]
NEXT pass%
IF P%-code% > 256 THEN STOP
ENDPROC
